@using BlazorApp.Data;
@inject ResistorServices ResistorServices;

@{
    @* SVG variables *@
    var numberOfBand = 5;
    var bandRightMargin = 40;
    var bandWidth = 20;

    var leftLine = 100;
    var marginEnd = 100;
    var firstBandX = leftLine + marginEnd;
    var secondBandX = firstBandX + bandWidth + bandRightMargin;
    var thirdBandX = secondBandX + bandWidth + bandRightMargin;
    var multiplierBandX = thirdBandX + bandWidth + bandRightMargin;
    var toleranceBandX = multiplierBandX + bandWidth + bandRightMargin;
    var rightLine = 100;

    var svgWidth = leftLine + marginEnd + ((numberOfBand - 1) * (bandWidth + bandRightMargin)) + bandWidth + marginEnd + rightLine;
}

<div class="d-flex flex-column align-items-center">
    <h3>@Title</h3>
    @* Five band resistor SVG *@
    <div class="my-md-5 justify-content-center">
        <svg width="@svgWidth" height="100%" xmlns="http://www.w3.org/2000/svg">
            <line x1="0" x2="100%" y1="50%" y2="50%" stroke="grey" stroke-width="2"></line>
            <rect class="resistor" x="@leftLine" width="@(svgWidth - leftLine - rightLine)" height="100%" fill="white" stroke="grey" />

            <rect class="resistor-firstband" x="@firstBandX" width="@bandWidth" height="100%" fill="@ResistorFiveBand.FirstBandColor" stroke="grey" />

            <rect class="resistor-secondband" x="@secondBandX" width="@bandWidth" height="100%" fill="@ResistorFiveBand.SecondBandColor" stroke="grey" />

            <rect class="resistor-thirdband" x="@thirdBandX" width="@bandWidth" height="100%" fill="@ResistorFiveBand.ThirdBandColor" stroke="grey" />

            <rect class="resistor-multiplierband" x="@multiplierBandX" width="@bandWidth" height="100%" fill="@ResistorFiveBand.MultiplierBandColor" stroke="grey" />

            <rect class="resistor-toleranceband" x="@toleranceBandX" width="@bandWidth" height="100%" fill="@ResistorFiveBand.ToleranceBandColor" stroke="grey" />
        </svg>
    </div>

    @* drop down selection for bands *@
    <div class="my-md-5 d-flex flex-row w-100">
        <div class="d-flex flex-column flex-fill">
            <label>First Band</label>
            <select name="SelectedFirstBandColor" @bind="ResistorFiveBand.FirstBandColor">
                @foreach (var color in FirstBandColors)
                {
                    <option value="@color" id="@color">[@color, @Array.IndexOf(FirstBandColors, color)]</option>
                }
            </select>
        </div>
        <div class="d-flex flex-column flex-fill">
            <label>Second Band</label>
            <select name="SelectedSecondBandColor" @bind="ResistorFiveBand.SecondBandColor">
                @foreach (var color in SecondBandColors)
                {
                    <option value="@color" id="@color">[@color, @Array.IndexOf(SecondBandColors, color)]</option>
                }
            </select>
        </div>
        <div class="d-flex flex-column flex-fill">
            <label>Third Band</label>
            <select name="SelectedThridBandColor" @bind="ResistorFiveBand.ThirdBandColor">
                @foreach (var color in ThirdBandColors)
                {
                    <option value="@color" id="@color">[@color, @Array.IndexOf(ThirdBandColors, color)]</option>
                }
            </select>
        </div>
        <div class="d-flex flex-column flex-fill">
            <label>Multiplier Band</label>
            <select name="SelectedMultiplierBandColor" @bind="ResistorFiveBand.MultiplierBandColor">
                @foreach (var color in MultiplierBandColors)
                {
                    <option value="@color.Key" id="@color">@color</option>
                }
            </select>
        </div>
        <div class="d-flex flex-column flex-fill">
            <label>Tolerance Band</label>
            <select name="SelectedToleranceBandColor" @bind="ResistorFiveBand.ToleranceBandColor">
                @foreach (var color in ToleranceBandColors)
                {
                    <option value="@color.Key" id="@color">@color</option>
                }
            </select>
        </div>
    </div>
    @* Button to update resistance value*@
    <div>
        <button type="button" @onclick="UpdateResistanceValue">Calculate Resistance</button>
    </div>
    <div class="w-100">
        Resistance value: @ResistanceValue
        @if (ResistanceValue > 0)
        {
            <text> &#x2126;</text>
            <text> &#xb1; @ToleranceValue</text>
        }
    </div>
</div>

@code {
    [Parameter]
    public string Title { get; set; }

    public string[] FirstBandColors { get; set; }
    public string[] SecondBandColors { get; set; }
    public string[] ThirdBandColors { get; set; }
    public Dictionary<string, double> MultiplierBandColors { get; set; }
    public Dictionary<string, double> ToleranceBandColors { get; set; }

    public ResistorFiveBand ResistorFiveBand { get; set; }

    public double ResistanceValue { get; set; }
    public double ToleranceValue { get; set; }

    protected override void OnInitialized()
    {

        FirstBandColors = ResistorServices.GetBands();
        SecondBandColors = ResistorServices.GetBands();
        ThirdBandColors = ResistorServices.GetBands();
        MultiplierBandColors = ResistorServices.GetMultipliers();
        ToleranceBandColors = ResistorServices.GetTolerances();

        ResistorFiveBand = new ResistorFiveBand
        (
            ResistorServices.ResistorFiveBand.FirstBandColor,
            ResistorServices.ResistorFiveBand.SecondBandColor,
            ResistorServices.ResistorFiveBand.ThirdBandColor,
            ResistorServices.ResistorFiveBand.MultiplierBandColor,
            ResistorServices.ResistorFiveBand.ToleranceBandColor
        );
        ResistanceValue = ResistorFiveBand.Resistance;
        ToleranceValue = ResistorFiveBand.Tolerance;
    }

    private void UpdateResistanceValue()
    {
        ResistanceValue = ResistorFiveBand.Resistance;
        ToleranceValue = ResistorFiveBand.Tolerance;
    }
}